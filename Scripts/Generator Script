firstPart = "c" -- Prefix (texto antes do nome)
lastPart = "" -- Suffix (texto depois do nome)
requests = 150 -- Numero de nomes generados (Pode nao generar todos, depende do API do ROBLOX)
maxJSONCharLimit = 7 -- Maximo de letras
minJSONCharLimit = 5 -- Minimo de letras
firstJSONLetterUppercase = true -- Mindgame -> MindGame
allowedFirstJSONLetters = {"all"}
includeNumbers = false -- Numeros?
showRequestTime = true -- Mostrar o tempo que levou a buscar ao API do ROBLOX.


--[[ faças o que fizeres, não edites nada para baixo ]]--
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------------
local http = game:GetService("HttpService")

local httpData = http:GetAsync("https://raw.githubusercontent.com/dwyl/english-words/master/words.txt")


local matchData = {}

for this in httpData:gmatch("%s(%a+)%s") do
	table.insert(matchData, this)
end


local names = {}
local players = game:GetService("Players")



local function Round(number, places)
	return tonumber(string.format("%." .. places .. "f", number))
end

local function randomizeTbl(tbl)
	local this = {}
	local thisRand = Random.new()
	for _=1, #tbl do
		table.insert(this, tbl[thisRand:NextInteger(1, #tbl)])
	end
	return this
end

local function isWhitelistedChar(v)
	if allowedFirstJSONLetters[1]:lower() == "all" or table.find(allowedFirstJSONLetters, v:sub(1, 1):lower()) then
		return true
	end
end


do
	for i=1, #allowedFirstJSONLetters do
		allowedFirstJSONLetters[i] = allowedFirstJSONLetters[i]:lower()
	end


	assert(firstPart:match("^%w+$") or firstPart:len() == 0, "A firstPart só pode conter números e letras.")
	assert(lastPart:match("^%w+$") or lastPart:len() == 0, "A lastPart só pode conter números e letras.")

	assert(table.find(allowedFirstJSONLetters, "all") and #allowedFirstJSONLetters == 1 or not table.find(allowedFirstJSONLetters, "all") and #allowedFirstJSONLetters >= 1, 'Self explanatory in code')

	matchData = randomizeTbl(matchData)
end


print("")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
warn("Demorou: ", Round(requests*0.1, 3) .. " segundos, ou "..Round(requests*0.1 / 60, 3) .. " minutos, ou " .. Round(requests*0.1 / 3600, 3) .. " horas a pedir ao API.")
print("")

wait(3)





local rgugmodule = game:GetService("ServerScriptService"):FindFirstChild("RGUsernameGen")

assert(rgugmodule, "module script inside of ServerScriptService has been deleted")

local deleteitem = Instance.new("ArcHandles")
deleteitem.Name = "DeleteThisToStopSearch"
deleteitem.Parent = rgugmodule


local desiredErrMatch = "Unknown user"
local start = os.clock()

for i=1, requests do

	if not deleteitem.Parent or not rgugmodule.Parent then break end

	local v = matchData[i]

	if not v:match("^%a+$") or v:len() > maxJSONCharLimit or v:len() < minJSONCharLimit or v:len() < 3 or not isWhitelistedChar(v) then
		continue
	end

	local upperMod = firstJSONLetterUppercase and (v:sub(1, 1):upper() .. (v:sub(2, v:len()))) or v
	local picked = firstPart .. upperMod .. (includeNumbers and math.random(1, 10) or "") .. lastPart
	local t = showRequestTime and os.clock()
	local exists, err = pcall(function() players:GetUserIdFromNameAsync(picked) end)

	if showRequestTime then
		print("request time: ", os.clock() - t)
	end

	if err and not err:match(desiredErrMatch) then
		warn(err)
		continue
	end

	if picked:len() >= 3 and not table.find(names, picked) and (not exists and err:match(desiredErrMatch)) then
		table.insert(names, picked)
	end
end

local timethattook = os.clock() - start

if deleteitem.Parent then
	deleteitem:Destroy()
end

print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
warn("Tempo total de SCAN: ", Round(timethattook, 3) .. " segundos, ou " .. Round(timethattook / 60, 3) .. " minutos, our " .. Round(timethattook / 3600, 3) .. " horas")

if #names == 0 then
	warn("no results, try again maybe")

else
	table.sort(names, function(a, b)
		return a < b
	end)

	warn(#names, " Nomes encontrados")

	for _, name in pairs(names) do
		print(name)
	end
end

print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
